openapi: 3.0.1
info:
  title: Stupro 2019 Querimonia API
  description: Querimonia ist eine Plattform zum automatischen Beschwerdemanagement. Über die hier beschriebene API kann mit dem Backend kommuniziert werden. Dies beinhaltet Upload von neuen Beschwerden, Abrufen der gespeicherten Beschwerden, Anfragen von Antworttexten, etc.
  version: 0.6.1
servers:
  - url: https://beschwerdemanagement.iao.fraunhofer.de/dev/
  - url: https://beschwerdemanagement.iao.fraunhofer.de/
  - url: https://querimonia.iao.fraunhofer.de/dev
  - url: https://querimonia.iao.fraunhofer.de/
  - url: http://localhost:8080/
tags:
  - name: complaints
    description: Hier können Beschwerden hochgeladen, verwaltet und editiert werden.
  - name: responses
    description: Hier können Antworten abgerufen werden.
  - name: components
    description: Hier können Textbausteine für Antworten verwaltet werden.
  - name: config
    description: Hier werden Einstellungen verwaltet, es können Extraktoren, Klassifizierer und Sentiment-Analysierer festgelegt werden.
  - name: stats
    description: Hier können verschiedene Statistiken über die Beschwerden abgerufen werden.
  - name: vector
    description: Hier können veschieden Operationen mit Wordvektoren ausgeführt werden.
paths:
  /api/complaints:
    get:
      tags:
        - complaints
      summary: Gibt Beschwerden zurück, die auf dem Server gespeichert sind.
      description: Gibt Beschwerden zurück, die in der Datenbank gespeichert wurden. Es können über die Parameter Filter angewandt werden, die Sortierung angegeben werden und die Anzahl und das Offset der Beschwerden bestimmt werden.
      parameters:
        - $ref: '#/components/parameters/CountParameter'
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/ComplaintsSortParameter'
        - $ref: '#/components/parameters/ComplaintStateParameter'
        - $ref: '#/components/parameters/DateMinParameter'
        - $ref: '#/components/parameters/DateMaxParameter'
        - $ref: '#/components/parameters/EmotionParameter'
        - $ref: '#/components/parameters/SubjectParameter'
        - $ref: '#/components/parameters/KeywordsParameter'

      operationId: getComplaints
      responses:
        200:
          description: Erfolgreiche Anfrage.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Complaint'
        400:
          $ref: '#/components/responses/IllegalParametersError'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/complaints/import:
    post:
      tags:
        - complaints
      summary: Läd eine neue Beschwerde in die Datenbank.
      description: Über diese Schnittstelle können Dateien hochgeladen werden. Akzeptiert werden txt, docx, doc und pdf Dateien mit einer maximalen Zeichenanzahl von 10000 Zeichen. Alternativ können über application/json direkt Texte eingefügt werden. Die Beschwerde wird beim Upload analysiert und eine Antwort wird generiert. Über den Query-Parameter configId kann eine bestimmte Konfiguration angegeben werden, mit der die neue Beschwerde analysiert werden soll.
      parameters:
        - $ref: '#/components/parameters/ConfigIdQueryParameter'
      requestBody:
        description: Die Datei/der Text, die hochgeladen werden soll.
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
              example: file content
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "Das ist eine Beispielbeschwerde"
      operationId: importComplaint
      responses:
        201:
          description: Datei wurde erfolgreich hochgeladen, der Text extrahiert, ausgewertet und als Beschwerde im System gespeichert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'
        400:
          description: Text konnte nicht aus Datei extrahiert werden oder Text ist zu lang.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        500:
          description: Fehlerhafte Konfiguration der Extraktoren, Klassifikatoren oder den Antwortbausteinen oder externe Extraktoren konnten nicht aufgerufen werden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'

  /api/complaints/{complaintId}:
    parameters:
      - $ref: '#/components/parameters/ComplaintIdParameter'

    get:
      tags:
        - complaints
      summary: Gibt eine Beschwerde mit der gegebenen Id zurück.
      description: Gibt eine Beschwerde mit der gegebenen Id zurück.
      operationId: getComplaint
      responses:
        200:
          description: Erfolgreiche Anfrage.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

    patch:
      tags:
        - complaints
      summary: Aktualisiert eine Beschwerde.
      description: Mit dieser Anfrage können Emotion, Kategorie und Status einer Beschwerde aktualisiert werden. Werden Kategorie und Sentiment gändert, so wird das setByUser-Attribut auf true gesetzt.
      requestBody:
        description: Ein Objekt mit Attributen, die aktualisiert werden sollen. Es müssen nur die Attribute angegeben werden, bei denen eine Änderung an der Beschwerde vorgenommen werden soll.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplaintUpdateRequest'
            example:
              "state": "CLOSED"
              "subject": "Fahrt nicht erfolgt"
      operationId: updateComplaint
      responses:
        200:
          description: Beschwerde wurde erfolgreich aktualisiert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'
        400:
          description: Die Beschwerde wurde bereits geschlossen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

    delete:
      tags:
        - complaints
      summary: Löscht eine Beschwerde.
      description: Löscht eine Beschwerde mit gegebener Id, falls diese vorhanden ist.
      operationId: deleteComplaint
      responses:
        204:
          description: Löschen erfolgreich.
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/complaints/{complaintId}/refresh:
    parameters:
      - $ref: '#/components/parameters/ComplaintIdParameter'

    patch:
      tags:
        - complaints
      summary: Ruft alle Analyse-Funktionen erneut auf.
      description: Alle Tools werden neu ausgeführt, vorhandene Informationen werden überschrieben. Über die Parameter kann definiert werden, ob vom Nutzer gesetzte Information dabei nicht überschreiben werden soll und welche Konfiguration verwendet werden soll.
      parameters:
        - name: keepUserInformation
          in: query
          description: Falls dieser Wert auf true gesetzt wird, werden vom Nutzer gesetzte Informationen nicht überschrieben.
          required: false
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/ConfigIdQueryParameter'
      operationId: refreshComplaint
      responses:
        200:
          description: Beschwerde wurde erfolgreich aktualisiert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'
        400:
          description: Beschwerde wurde bereits geschlossen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        404:
          description: Eine Konfiguration oder eine Beschwerde mit der gegebenen ID existiert nicht.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        500:
          description: Unerwarteter Serverfehler, externe Tools können nicht erreicht werden oder fehlerhafte Konfiguration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
                
  /api/complaints/{complaintId}/close:
    parameters:
      - $ref: '#/components/parameters/ComplaintIdParameter'

    patch:
      tags:
        - complaints
      summary: Schließt eine Beschwerde ab und führt alle Aktionen aus.
      description: Die Beschwerde mit der gegebenen ID wird auf geschlossenen gesetzt, wodurch sie nicht mehr bearbeitet werden kann. Alle Aktionen, die zu dieser Beschwerde gehören, werden ausgeführt.
      
      operationId: closeComplaint
      responses:
        200:
          description: Beschwerde wurde erfolgreich abgeschlossen, die Beschwerde wird als Body zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'
        400:
          description: Beschwerde wurde bereits geschlossen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/complaints/count:
    get:
      tags:
        - complaints
      summary: Gibt die Anzahl der Beschwerden zurück.
      description: Gibt die Anzahl von Beschwerden in der Datenbank zurück, wobei Filter angewendet werden können.
      parameters:
        - $ref: '#/components/parameters/DateMinParameter'
        - $ref: '#/components/parameters/DateMaxParameter'
        - $ref: '#/components/parameters/EmotionParameter'
        - $ref: '#/components/parameters/SubjectParameter'
        - $ref: '#/components/parameters/KeywordsParameter'

      operationId: countComplaints
      responses:
        200:
          description: Erfolgreiche Anfrage.
          content:
            text/plain:
              schema:
                type: integer
                format: int64
                example: 140
        400:
          description: Üngültige Angabe von Parametern.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/complaints/{complaintId}/entities:
    parameters:
      - $ref: '#/components/parameters/ComplaintIdParameter'

    get:
      tags:
        - complaints
      summary: Gibt die Entitäten der Beschwerde zurück.
      description: Gibt alle Entitäten, die in der Beschwerde gefunden wurden, als Liste zurück.
      
      operationId: getEntities
      responses:
        200:
          description: Die Entitäten werden zurückgegeben.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamedEntity'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'
  
    post:
      tags:
        - complaints
      summary: Fügt eine neue Named Entity hinzu.
      description: Eine neue Named Entity wird der Liste der Entitäten der Beschwerde hinzugefügt.

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedEntity'

      operationId: addEntity
      responses:
        201:
          description: Die Entity wurde der Beschwerde hinzugefügt. Eine aktualisierte Entity-Liste wird zurückgegeben.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamedEntity'
        400:
          description: Die gegebene Entität ist schon vorhanden (mit gleichem Extraktor an der exakt gleichen Position), der gebene Extraktor ist unbekannt, die Beschwerde ist bereits abgeschlossen oder die gegebenen Indices liegen außerhalb der Textgrenzen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/complaints/{complaintId}/entities/{entityId}:
    parameters:
      - $ref: '#/components/parameters/ComplaintIdParameter'

    delete:
      tags:
        - complaints
      summary: Löscht eine Named Entity.
      description: Eine neue Named Entity wird aus der Liste der Entitäten entfernt.
      parameters:
        - name: entityId
          in: path
          description: Die eindeutige Id der Entität, die gelöscht werden soll.
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1

      operationId: deleteEntity
      responses:
        200:
          description: Die Entity wurde der Beschwerde hinzugefügt. Eine aktualisierte Entity-Liste wird zurückgegeben.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamedEntity'
                example:
                  - label: 'Geldbetrag'
                    start: 5
                    end: 10
                    setByUser: true
                    extractor: 'QuerimoniaExtract'
        404:
          description: Die gegebene Entität/Beschwerde ist nicht vorhanden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/complaints/all:
    delete:
      tags:
        - complaints
      summary: Löscht alle Beschwerden aus der Datenbank
      description: Löscht alle Beschwerden aus der Datenbank.
      operationId: deleteAllComplaints
      responses:
        204:
          description: Löschen erfolgreich.
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/responses/{complaintId}:
    parameters:
      - $ref: '#/components/parameters/ComplaintIdParameter'

    get:
      tags:
        - responses
      summary: Gibt die generierte Antwort zu einer Beschwerde zurück.
      description: Zur jeder Beschwerde wird eine Antwort generiert, die über diese Schnittstelle abgerufen werden kann. Eine Antwort enthält eine Liste an Antwortbausteinen sowie eine Liste an Aktionen.
      operationId: getResponse
      responses:
        200:
          description: Die Antwort der Beschwerde wird zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuggestion'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/responses/{complaintId}/refresh:
    parameters:
      - $ref: '#/components/parameters/ComplaintIdParameter'

    patch:
      tags:
        - responses
      summary: Generiert eine neue Antwort zu einer Beschwerde.
      description: Die Antwort zu einer Beschwerde wird neugeneriert und zurückgegben.
      operationId: refreshResponse
      responses:
        200:
          description: Die neu generierte Antwort der Beschwerde wird zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuggestion'
        400:
          description: Die Beschwerde wurde bereits geschlossen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          description: Fehlerhaft konfigurierte Textbausteine/Aktionen, unerwarteter Serverfehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'

  /api/components:
    get:
      tags:
        - components
      summary: Gibt die gespeicherten Antwortbausteine zurück.
      description: Hier können alle in der Datenbank gespeicherten Antwortbausteine abgerufen werden. Dabei ist Filtern/Pagination möglich.
      parameters:
        - $ref: '#/components/parameters/CountParameter'
        - $ref: '#/components/parameters/PageParameter'
        - name: sort_by
          in: query
          description: Hier können alle Kategorien angegeben werden, nach denen die Anfrage sortiert werden soll. Die Reihenfolge im Array bestimmt die Priorität beim Sortieren.
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [id_desc, id_asc, priority_desc, priority_asc, name_desc, name_asc]
              default: name_asc
              example: name_asc
        - $ref: '#/components/parameters/KeywordsParameter'

      operationId: getResponseComponents
      responses:
        200:
          description: Die Antwortbausteine werden gefiltert und sortiert zurückgegeben.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseComponent'
        400:
          $ref: '#/components/responses/IllegalParametersError'
        500:
          $ref: '#/components/responses/UnexpectedError'

    post:
      tags:
        - components
      summary: Fügt dem System einen neuen Antwortbaustein hinzu.
      description: Fügt einen neuen Antwortbaustein hinzu. Dieser kann Platzhalter enthalten, welche mit Entitäten aus der Beschwerden ersetzt werden.
      requestBody:
        description: Der neue Textbaustein, der dem System hinzufügt werden soll. Im Request-Body müssen ID und requiredEntities nicht angegeben werden, diese werden bei Angabe nicht beachtet.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseComponent'

      operationId: addResponseComponent
      responses:
        201:
          description: Das Template ist richtig formatiert, die Regelbeschreibung ist gültig und wurde in der Datenbank gespeichert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseComponent'
        400:
          description: Der Textbaustein enthält ungültige Formatierungen oder überschreitet das Zeichenlimit von 5000 Zeichen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XmlException'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/components/default:
    post:
      tags:
        - components
      summary: Fügt dem System eine Menge an Standard-Antwortbausteinen hinzu.
      description: Fügt eine Menge an Standard-Antwortbausteinen hinzu. Diese enthält verschiedene Bausteine für Begrüßungen, Eingangsdaten, Problembeschreibungen, Entschuldigungen, Lösungsvorschläge, Erstattungen und Schlüsse. Die Bausteine gehören zu den Kategorien Fahrer unfreundlich, Fahrt nicht erfolgt, Sonstiges. Jeder Baustein hat drei verschiedene Texte und verschiedene Varianten mit/ohne Platzhaltern.

      operationId: addDefaultComponents
      responses:
        200:
          description: Die Standard Bausteine wurden erfolgreich hinzugefügt.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseComponent'
        500:
          description: Die Datei mit den Standard-Antwortbausteinen ist nicht vorhanden, korrupt oder nicht richtig formatiert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'

  /api/components/{componentId}:
    parameters:
      - name: componentId
        in: path
        description: Die eindeutige ID des Bausteins.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
          example: 1

    get:
      tags:
        - components
      summary: Gibt ein bestimmten Antwortbaustein zurück.
      description: Gibt den Antwortbaustein mit der gegebenen ID zurück.
      operationId: getResponseComponent
      responses:
        200:
          description: Der Antwortbaustein wird zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseComponent'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

    delete:
      tags:
        - components
      summary: Löscht einen Antwortbaustein.
      description: Löscht den Antwortbaustein mit der gegebenen ID aus der Datenbank.
      operationId: deleteResponseComponent
      responses:
        204:
          description: Der Antwortbaustein wurde gelöscht.
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

    put:
      tags:
        - components
      summary: Aktualisiert einen bestehenden Antwortbaustein.
      description: Aktualisiert den Antwortbaustein mit der gegebenen ID. Es sollten nur die Properties angegeben werden, die als required markiert sind, "requiredEntities" und ID sollten nicht angegeben werden und werden bei Angabe ignoriert.
      requestBody:
        description: Der aktualisierte Baustein. Im Request-Body müssen ID und requiredEntities nicht angegeben werden, bei Angabe werden diese ignoriert.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseComponent'
      operationId: updateResponseComponent
      responses:
        200:
          description: Component erfolgreich aktualisiert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseComponent'
        404:
          $ref: '#/components/responses/NotFoundError'
        400:
          description: Der Textbaustein enthält ungültige Formatierungen, die Regelbeschreibung ist ungültig oder überschreitet das Zeichenlimit von 5000 Zeichen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/components/count:
    get:
      tags:
        - components
      summary: Zählt die gespeicherten Antwortbausteine.
      description: Hier kann die Anzahl der Anwortbausteine in der Datenbank abgerufen werden. Dabei können auch Filter angewendet werden.
      parameters:
        - $ref: '#/components/parameters/KeywordsParameter'
      operationId: countResponseComponents
      responses:
        200:
          description: Die Anzahl der Antwortbausteine werden zurückgegeben.
          content:
            text/plain:
              schema:
                type: integer
                format: int64
                example: 48
        400:
          $ref: '#/components/responses/IllegalParametersError'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/components/all:
    delete:
      tags:
        - components
      summary: Löscht alle Antwortbausteine aus der Datenbank.
      description: Alle Antwortbausteine werden aus der Datenbank entfernt.
      operationId: deleteAllResponseComponents
      responses:
        204:
          description: Alle Antwortbausteine wurden aus der Datenbank entfernt.
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/config:
    get:
      tags:
        - config
      summary: Gibt die gespeicherten Konfigurationen zurück.
      description: Hier können alle in der Datenbank gespeicherten Konfigurationen abgerufen werden. Dabei ist Pagination/Sortieren möglich.
      parameters:
        - $ref: '#/components/parameters/CountParameter'
        - $ref: '#/components/parameters/PageParameter'
        - name: sort_by
          in: query
          description: Hier können alle Kategorien angegeben werden, nach denen die Anfrage sortiert werden soll. Die Reihenfolge im Array bestimmt die Priorität beim Sortieren.
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [id_desc, id_asc, name_desc, name_asc]
              default: "id_desc"
      operationId: getConfigurations
      responses:
        200:
          description: Die Konfigurationen werden zurückgegeben
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyzerConfiguration'
        400:
          $ref: '#/components/responses/IllegalParametersError'
        500:
          $ref: '#/components/responses/UnexpectedError'

    post:
      tags:
        - config
      summary: Fügt dem System eine neue Konfiguration hinzu.
      description: Fügt eine neue Konfiguration hinzu. Diese wird **nicht** automatisch als aktive Konfiguration gesetzt.
      requestBody:
        description: Die neue Konfiguration, die dem System hinzugefügt werden soll. Die ID wird automatisch generiert und muss nicht angegeben werden.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzerConfiguration'
      operationId: addConfiguration
      responses:
        201:
          description: Die Konfiguration ist gültig und wurde dem System hinzugefügt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzerConfiguration'
        400:
          description: Ungültige Konfiguration. Es werden ungültige Extraktoren, Klassifikatoren oder Sentiment-Analysierer verwendet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/config/{configId}:
    parameters:
      - $ref: '#/components/parameters/ConfigIdParameter'

    get:
      tags:
        - config
      summary: Gibt eine bestimmte Konfiguration zurück.
      description: Gibt die Konfiguration mit der gegebenen ID zurück.
      operationId: getConfiguration
      responses:
        200:
          description: Die Konfiguration wird zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzerConfiguration'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

    delete:
      tags:
        - config
      summary: Löscht eine Konfiguration.
      description: Löscht die gegebene Konfiguration aus der Datenbank. Wenn alle Konfigurationen gelöscht wurden, wird eine Default-Konfiguration verwendet.
      operationId: deleteConfiguration
      responses:
        204:
          description: Der Konfiguration wurde gelöscht.
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

    put:
      tags:
        - config
      summary: Aktualisiert eine bestehende Konfiguration.
      description: Aktualisiert die Konfiguration mit der gegebenen ID.
      requestBody:
        description: Die Konfiguration, die übernommen werden soll. Die ID sollte nicht angegeben werden und wird ansonsten ignoriert.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzerConfiguration'
      operationId: updateConfiguration
      responses:
        200:
          description: Konfiguration wurde erfolgreich aktualisiert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzerConfiguration'
        404:
          $ref: '#/components/responses/NotFoundError'
        400:
          description: Die übergebene Konfiguration ist ungültig.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerimoniaException'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/config/count:
    get:
      tags:
        - config
      summary: Gibt die Anzahl der Konfigurationen zurück.
      description: Gibt die Anzahl der in der Datenbank gespeicherten Konfigurationen zurück.
      operationId: countConfigurations
      responses:
        200:
          description: Konfigurationsanzahl wird zurückgegeben.
          content:
            text/plain:
              schema:
                type: integer
                format: int64
                minimum: 0
                example: 42
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/config/current:
    get:
      tags:
        - config
      summary: Gibt die aktuell aktive Konfiguration zurück.
      description: Gibt die Konfiguration zurück, die aktuell als Standard eingestellt ist.
      operationId: getCurrentConfiguration
      responses:
        200:
          description: Gibt die aktuell als Standard einsgestellte Konfiguration zurück.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzerConfiguration'
        500:
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
        - config
      summary: Setzt die aktuell aktive Konfiguration.
      description: Setzt die aktuell aktive Konfiguration auf die Konfiguration mit der gegebenen ID.
      parameters:
        - $ref: '#/components/parameters/ConfigIdQueryParameter'
      operationId: updateCurrentConfiguration
      responses:
        200:
          description: Die Konfiguration mit der gegebenen ID wurde als aktive Konfiguration ausgewählt, diese wird zurück gegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzerConfiguration'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/config/all:
    delete:
      tags:
        - config
      summary: Löscht alle Konfigurationen.
      description: Löscht alle Konfigurationen aus der Datenbank und setzt das System auf eine Default-Konfiguration zurück.
      operationId: deleteAllConfigurations
      responses:
        204:
          description: Löschen war erfolgreich.
        500:
          $ref: '#/components/responses/UnexpectedError'

  /api/stats/tagcloud:
    get:
      tags:
        - stats
      summary: Gibt die häufigsten Worte aus den Beschwerden zurück.
      description: Gibt eine Map zurück, die die häufigsten Wörter der Beschwerden und deren absoluten Häufigkeiten zurück. Hierbei werden Stopwörter heraus gefiltert. Über Parameter können die Beschwerden gefiltert werden, aus denen die häufigsten Worten analysiert werden.
      parameters:
        - name: count
          in: query
          description: Anzahl der häufigsten Wörter, die maximal zurückgegben werden sollen. Ohne Angabe werden alle zurückgegeben.
          required: false
          schema:
            type: integer
            format: int32
            example: 32
        - $ref: '#/components/parameters/DateMinParameter'
        - $ref: '#/components/parameters/DateMaxParameter'
        - $ref: '#/components/parameters/EmotionParameter'
        - $ref: '#/components/parameters/SubjectParameter'
        - name: words_only
          in: query
          required: false
          description: Falls true, werden alle Worte die nur aus Zahlen oder Sonderzeichen bestehen herausgefiltert.
          schema:
            type: boolean
            default: false
      operationId: getMostCommonWords
      responses:
        200:
          description: Die häufigsten Wörter und deren Häufigkeit werden zuückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MostCommonWords'
        500:
          $ref: '#/components/responses/UnexpectedError'

components:
  parameters:
    ComplaintIdParameter:
      name: complaintId
      in: path
      description: Die eindeutige ID einer Beschwerde.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
        example: 1

    ComplaintStateParameter:
      name: state
      in: query
      required: false
      description: Gibt die Status an, in dem sich eine Beschwerde befindet. Ohne Angabe werden geschlossene Beschwerden nicht zurückgegeben.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ComplaintState'
        default:
          - NEW
          - IN_PROGRESS

    ConfigIdParameter:
      name: configId
      in: path
      required: true
      description: Die eindeutige ID einer Konfiguration
      schema:
        type: integer
        format: int64
        minimum: 1
        example: 1

    CountParameter:
      name: count
      in: query
      description: Anzahl der Elemente, die zurück gegeben werden sollen. Falls nicht angegeben, werden alle Elemente zurückgegeben.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        example: 10

    PageParameter:
      name: page
      in: query
      description: Falls page 0 ist, werden die ersten *count* Elemente zurück gegeben, falls page 1 ist die zweiten *count* Elemente, gibt also die Seitenzahl an. Falls nicht angegeben, wird 0 angenommen. Wird ignoriert, falls *count* nicht gegeben ist.
      required: false
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
        example: 0

    ComplaintsSortParameter:
      name: sort_by
      in: query
      required: false
      description: Hier können alle Kategorien angegeben werden, nach denen die Anfrage sortiert werden soll. Die Reihenfolge im Array bestimmt die Priorität beim Sortieren.
      schema:
        description: Ein Array von Kategorien, nach denen eine Anfrage sortiert werden soll. Zusätzlich wird angegeben, ob auf oder absteigend sortiert wird.
        type: array
        items:
          type: string
          description: Gibt an, nach was die Beschwerden sortiert werden sollen.
          enum:
            - id_asc
            - id_desc
            - state_asc
            - state_desc
            - upload_date_asc
            - upload_date_desc
            - subject_asc
            - subject_desc
            - sentiment_asc
            - sentiment_desc
            - emotion_asc
            - emotion_desc
        default: ["state_asc", "upload_date_desc"]

    DateMinParameter:
      name: date_min
      in: query
      required: false
      description: Bei Angabe werden nur Beschwerden ausgewertet, die nach diesem Datum hochgeladen wurden. Datum muss [RFC3339 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) enstprechen, also dem Format yyyy-mm-dd.
      schema:
        type: string
        format: date
        example: 2019-03-29

    DateMaxParameter:
      name: date_max
      in: query
      required: false
      description: Bei Angabe werden nur Beschwerden ausgewertet, die vor diesem Datum hochgeladen wurden. Das Datum entpricht dem gleichen Format wie bei *dateMin*
      schema:
        type: string
        format: date
        example: 2019-07-23

    EmotionParameter:
      name: emotion
      in: query
      required: false
      description: Bei Angabe werden nur Beschwerden ausgewertet, die einem der gegebenen Emotionen entsprechen.
      schema:
        type: array
        items:
          type: string
        example:
          - "Wut"
          - "Unzufriedenheit"

    SubjectParameter:
      name: subject
      in: query
      required: false
      description: Bei Angabe werden nur Beschwerden ausgewertet, die einem der gegebenen Kategorien von Beschwerden entsprechen.
      schema:
        type: array
        items:
          type: string
        example:
          - "Fahrt nicht erfolgt"
          - "Sonstiges"

    KeywordsParameter:
      name: keywords
      in: query
      required: false
      description: Bei Angabe werden nur Elemente ausgewertet, die die angebenen Schlüsselwörter enthalten.
      schema:
        type: array
        items:
          type: string
        example:
          - "Busfahrer"
          - "unfreundlich"

    ConfigIdQueryParameter:
      name: configId
      in: query
      description: Falls dieser Wert gegeben wird, wird die Beschwerde mit der gegebenen Konfiguration analysiert. Ansonsten wird die aktuell ausgewählt Konfiguration ausgewählt.
      required: false
      schema:
        type: integer
        format: int64
        minimum: 1
        example: 1

  schemas:
    Complaint:
      required:
        - state
        - configuration
        - text
        - preview
        - receiveDate
        - receiveTime
        - properties
        - emotion
        - sentiment
        - entities
      type: object
      description: Diese Datenstuktur modelliert eine Beschwerde (oder eine eingegangen Meldung von anderer Art). Eine Beschwerde besitzt eine eindeutige ID, einen Zustand (in Bearbeitung, geschlossen), den Meldetext, Eingangsdatum, sowie weitere Eigenschaften wie Sentiment und Kategorie. Weiterhin ist zu jeder Beschwerde gespeichert mit welcher Konfigutartion sie analysiert wurde.
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 1
          description: Die eindeutige ID der Beschwerde.
        text:
          type: string
          description: Der volle Beschwerdetext.
          example: "Guten Tag,\nMein Bus kam heute viel zu spät!\nSie müssen mir den Schaden ersetzen!!"
        preview:
          type: string
          description: Die ersten zwei Zeilen der Beschwerde.
          example: "Guten Tag,\nMein Bus kam heute viel zu spät!"
        state:
          $ref: '#/components/schemas/ComplaintState'
        configuration:
          $ref: '#/components/schemas/AnalyzerConfiguration'
        receiveDate:
          type: string
          format: date
          description: Das Eingangsdatum der Beschwerde im Format yyyy-mm-dd.
          example: "2019-05-02"
        receiveTime:
          type: string
          format: date-time
          description: Die Eingangszeit der Beschwerde im System im Format hh:mm:ss
          example: "13:45:00"
        properties:
          type: array
          description: Die Ergebnisse der Klassifikatoren, zum Beispiel für die Kategorie der Beschwerde.
          items:
            $ref: '#/components/schemas/ComplaintProperty'
        subject:
          $ref: '#/components/schemas/ComplaintProperty'
        emotion:
          $ref: '#/components/schemas/ComplaintProperty'
        sentiment:
          type: number
          description: Der Wert des Sentiments. Positive Werte bedeuten positives Sentiment, negative Werte bedeuten negatives Sentiment.
          example: 0.4

    ComplaintProperty:
      type: object
      description: Eine Eigenschaft für Beschwerden, zum Beispiel für Kategorie und Sentiment. Enhält einen Bezeichner, Wahrscheinlichkeiten für Werte und ein Flag, ob der Wert vom Nutzer gesetzt wurde.
      required:
        - name
        - value
        - probabilities
        - setByUser
      properties:
        name:
          type: string
          example: 'Kategorie'
          description: Name der Eigenschaft
        value:
          type: string
          example: Fahrt nicht erfolgt
          description: Die Bezeichnung der Kategorie oder des Sentiments.
        setByUser:
          type: boolean
          example: false
          description: Ob der Parameter vom Nutzer gesetzt wurde oder automatisch erkannt wurde.
        probabilities:
          type: object
          description: Gibt die Wahrscheinlichkeiten für alle Kategorien an, dass die Beschwerde eine bestimmte Kategorie / ein bestimmtes Sentiment hat.
          additionalProperties:
            type: number
          example:
            "Fahrt nicht erfolgt": 0.6
            "Fahrer unfreundlich": 0.3
            "Sontiges": 0.1

    ComplaintState:
      type: string
      description: Definiert den Status einer Beschwerde. Eine Beschwerde kann neu, in Bearbeitung und abgeschlossen sein.
      enum: [NEW, IN_PROGRESS, CLOSED]
      example: "NEW"

    ComplaintUpdateRequest:
      description: Ein Objekt mit optionalen Feldern, welches zum Aktualisieren von Beschwerden verwendet wird.
      type: object
      properties:
        state:
          $ref: '#/components/schemas/ComplaintState'
        subject:
          type: string
          description: Die Kategorie der Beschwerde, die übernommen werden soll.
          example: "Fahrer unfreundlich"
        emotion:
          type: string
          description: Die Emotion der Beschwerde, das übernommen werden soll.
          example: "Freunde"

    NamedEntity:
      description: Beschreibt den Anfangs- und Endindex einer *Named-Entity* einer bestimmten Kategorie. Außerdem ist angeben. ob die Entität von einem Nutzer gesetzt wurde und welcher Extraktor zur Findung gefunden wurde. Dieser wird nicht aktualisiert, wenn sich die Extraktoren-Einstellungen ändern! Der gegebene Farbwert, sollte also nur als Fallback verwendet werden.
      type: object
      required:
        - label
        - start
        - end
        - value
        - setByUser
        - extractor
      properties:
        id:
          type: integer
          description: Eine eindeutige ID der Named Entity.
          minimum: 1
          example: 1
        label:
          type: string
          description: Die Kategorie der Entität.
          example: Datum
        start:
          type: integer
          format: int64
          description: Der Index des Zeichens im Text, mit dem die Named Entity beginnt.
          example: 24
        end:
          type: integer
          format: int64
          description: Der Index des Zeichens im Text, ab dem der Text *nicht* mehr diese Named Entity ist.
          example: 29
        value:
          type: string
          description: Der Text der Entität, ggf. korrigiert.
          example: '23. Januar 2001'
        setByUser:
          type: boolean
          description: Gibt an, ob eine Entität vom Nutzer gesetzt wurde (true) oder vom System marktiert wurde (false).
          example: false
        extractor:
          type: string
          description: The name of the extractor that es used to find this entity.
          example: 'QuerimoniaExtract'

    AnalyzerConfiguration:
      description: In der Konfiguration ist festgelegt, welche Extraktoren, welcher Klassifikator und Sentiment-Analysierer verwerdet wird.
      type: object
      required:
        - extractors
        - classifiers
        - sentimentAnalyzer
      properties:
        id:
          type: integer
          format: int64
          description: Eindeutige ID der Konfiguration.
          minimum: 1
          example: 1
        name:
          type: string
          description: Ein Name zur Identifikation und besseren Unterscheidung für den Nutzer. Muss **eindeutig** sein.
          example: "Default-Konfiguration"
        extractors:
          type: array
          items:
            $ref: '#/components/schemas/Extractor'
        classifiers:
          type: array
          items:
            $ref: '#/components/schemas/Classifier'
        sentimentAnalyzer:
          $ref: '#/components/schemas/SentimentAnalyzer'

    Classifier:
      description: Ein Klassifizierer bestimmt die Kategorie (Subject) einer Beschwerde.
      type: object
      required:
        - name
        - propertyName
        - type
      properties:
        name:
          description: Der Name des Klassifizierers. Bei KIKuKo-Klassifizieren muss in KIKuKu ein Klassifizierer mit diesem Namen existieren.
          example: 'QuerimoniaExtract'
          type: string
        propertyName:
          description: Die Art von Eigenschaft, die vom Klassifizierer analysiert wird.
          example: 'Kategorie'
          type: string
        type:
          type: string
          enum:
            - KIKUKO_CLASSIFIER
            - NONE
          description: Gibt den Typ des Klassifizieres an.
          example: 'KIKUKO_CLASSIFIER'

    SentimentAnalyzer:
      description: Dient zur Analyse des Sentiments einer Beschwerde.
      type: object
      required:
        - name
        - type
      properties:
        name:
          description: Der Name des Analysierers.
          example: 'QuerimoniaExtract'
          type: string
        type:
          type: string
          enum:
            - QUERIMONIA_SENTIMENT
            - NONE
          description: Gibt den Typ des Klassifizieres an.
          example: 'QUERIMONIA_SENTIMENT'

    Extractor:
      description: Ein Extraktor hat einen **eindeutigen** Namen, einen Typ und eine zugeordnete Farbe für jede Entity für die Anzeige im Frontend.
      type: object
      required:
        - name
        - type
        - colors
      properties:
        name:
          type: string
          description: Der Name des Extraktors. Bei KIKuKo Extraktoren muss ein Extraktor mit diesem Namen konfiguriert sein.
          example: GeldbetragExtraktor
        type:
          type: string
          enum:
            - KIKUKO_TOOL
            - KIKUKO_PIPELINE
            - KIKUKO_DOMAIN
            - NONE
          description: Eine Bezeichner für den Typ von Entraktor. KIkukoTool wird für Tools von KIkuko verwendet.
          example: KIKuKoTool
        colors:
          type: array
          description: Gibt für beliebige Entity-Labels einen Farbcode an, mit der die Entität dargestellt wird.
          items:
            type: object
            description: Gibt für ein Label die zugehörige Farbe an.
            properties:
              label:
                description: Das Label der Entität.
                type: string
                example: 'Name'
              color:
                description: Der Farbwert der Entität.
                type: string
                example: '#CCAABB'

    ResponseComponent:
      description: Ein generischer Antwortbaustein. Dieser besteht aus möglicherweise mehereren Alternativtexten, die Platzhalter enthalten können, sowie einer Regelbeschreibung, die angibt, wann der Baustein verwendet werden kann.
      type: object
      required:
        - priority
        - componentName
        - componentTexts
        - actions
        - rulesXml
      properties:
        id:
          type: integer
          format: int64
          description: Die eindeutige ID des Antwortbausteins.
          minimum: 1
          example: 1
        priority:
          type: integer
          format: int64
          example: 100
          description: Eine Zahl, die die Priorität bei der Antwortgenerierung angibt. Bausteine mit hoher Priorität werden zuerst geprüft und ggf. verwendet.
        componentName:
          type: string
          description: Eine **eindeutige** Bezeichung, welchen Teil einer Antwort der Baustein widerspiegelt.
          example: 'Begrüßung'
        componentTexts:
          type: array
          description: Die Textalternativen ggf. mit Platzhaltern, die in der Antwort verwendet werden können
          items:
            type: string
            description: Bausteintext mit Platzhaltern.
            example: "Sehr geehrter Herr ${Name},"
        actions:
          type: array
          description: Alle Aktionen, die mit bei Erfüllung der Regeln ausgeführt werden sollen.
          items:
            $ref: '#/components/schemas/Action'
        rulesXml:
          type: string
          description: XML-Beschreibung der Regeln, die beschreiben, wann ein Antwortbaustein verwendet werden darf. Muss dem XSD-Schema entsprechen.
        requiredEntities:
          type: array
          description: Die nötigen Entitäts-Typen für den Antwortbaustein.
          items:
            type: string
            example: "Name"
            description: Eine Entity, die für den Antwortbaustein vorhanden sein muss. Muss **nicht** beim Posten eines Bausteins angegeben werden.

    CompletedResponsePart:
      description: Ein Teil der Anwort mit Antworttextalternativen und den zugehörigen Entitäten.
      type: object
      required:
        - component
        - entities
      properties:
        entities:
          type: array
          description: Alle Entitäten, die in diesem Baustein verwendet werden können.
          items:
            $ref: '#/components/schemas/NamedEntity'
        component:
          $ref: '#/components/schemas/ResponseComponent'

    ResponseSuggestion:
      description: Vollständiger Antwortvorschlag, bestehend aus ausgefüllten Text-Komponenten und Aktionen.
      type: object
      required:
        - components
        - actions
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/CompletedResponsePart'
          description: Eine Liste an Antwortbausteinen, deren Reihenfolge der Reihenfolge entspricht, wie sie im Gesamten einen sinnvollen Text ergeben.
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
          description: Die Aktionen, die bei Abschluss der Beschwerde ausgeführt werden sollen.

    Action:
      description: Eine Aktion kann automatisch beim Abschluss einer Beschwerde ausgelöst werden, wenn bestimmt Regeln dafür erfüllt sind. Zum Beispiel können E-Mails versendet werden, Gutscheine als Attachment angehängt werden, Beschwerden weitergeleitet werden etc.
      type: object
      required:
        - name
        - actionCode
        - rulesXml
        - parameters
      properties:
        name:
          description: Ein eindeutiger Bezeichnert für die Aktion.
          type: string
          example: "GutscheinFreifahrt"
        actionCode:
          $ref: '#/components/schemas/ActionCode'
        parameters:
          description: Zusätzliche Parameter für die Aktion, zum Beispiel an wen eine E-Mail gesendet wird oder den Wert des Gutscheins.
          type: object
          additionalProperties:
            type: string
          example:
            "E-Mail": "beispiel@gmail.com"
            "Text": "Beispieltext"
            "Gutscheinwert": "5"

    ActionCode:
      description: Eine Bezeichung, die den Typ der Aktion angibt.
      type: string
      enum:
        - SEND_MAIL
        - ATTACH_VOUCHER
      example: "ATTACH_VOUCHER"

    MostCommonWords:
      description: Enthält die häufigsten Wörter aus den Beschwerden
      type: object
      additionalProperties:
        type: integer
        format: int64
      example:
        "Fahrer": 32
        "Bus": 29
        "fahren": 24

    QuerimoniaException:
      description: Rückgabetyp im Fehlerfall.
      type: object
      required:
        - timestamp
        - statusCode
        - message
        - title
      properties:
        timestamp:
          description: Der genaue Zeitpunkt, wann der Fehler aufgetreten ist.
          type: string
          format: date-time
          example: '2019-07-04T15:24:23.3942221'
        statusCode:
          description: Der HTTP-Status Code, der zuückgegeben wird.
          type: integer
          format: int64
          example: 500
        message:
          description: Die Beschreibung des Fehlers auf Deutsch
          type: string
          example: 'Die Beschwerde konnte nicht gespeichert werden!'
        title:
          description: Kurze Fehlerbeschreibung, Titel für Fehlerdialog
          type: string
          example: 'Fehler beim Speichern'
        exception:
          description: Falls verfügbar, der Name der Java-Exception, die beim Fehler geworfen wurde.
          type: string
          example: "IOException"

    XmlException:
      description: Ein Xml-Parse-Fehler
      type: object
      allOf:
        - $ref: '#/components/schemas/QuerimoniaException'
      properties:
        line:
          type: integer
          format: int32
          example: 1
          minimum: 1
          description: Die Liniennummer des Fehlers, beginnend bei 1
        column:
          type: integer
          format: int32
          example: 0
          minimum: 0
          description: Der Zeichenindex des Fehlers, beginnend bei 0.

  responses:
    UnexpectedError:
      description: Unerwarteter Serverfehler
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QuerimoniaException'

    NotFoundError:
      description: Auf dem Server existiert kein Element mit der übergebenen ID.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QuerimoniaException'

    IllegalParametersError:
      description: Die übergebenen Parameter sind ungültig, zum Beispiel vom falschen Datentyp.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QuerimoniaException'

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic